{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Ravil's personal notes","text":""},{"location":"#overview","title":"Overview","text":"<p>This site is result of copy-paste of my notes from Notion for sharing.</p> <p>I'll try my best to move all my technical notes from Notion as soon as possible.</p>"},{"location":"tcp/","title":"TCP Overview","text":"<p>Transport issues are the responsibility of the endpoints in question and thus should not be delegated to the core network.</p> <p>Two issues falling under this category are data corruption and congestion. For the first, even though essentially all links on the Internet have link-layer checksums to protect against data corruption, TCP still adds its own checksum (in part because of a history of data errors introduced\u00a0within\u00a0routers). For the latter,  TCP is today essentially the\u00a0only\u00a0layer  that addresses congestion management.</p>"},{"location":"tcp/congestion/","title":"TCP Congestion Control","text":"<p>Congestion control algorithms have been developed to maintain performance on congested networks. Some operating systems (including Linux-based) allow the algorithm to be selected as part of system tuning. These algorithms include:</p> <ul> <li>Reno: Triple duplicate ACKs trigger: halving of the congestion window, halving of the slow-start threshold, fast retransmit, and fast recovery.</li> <li>Tahoe: Triple duplicate ACKs trigger: fast retransmit, halving the slow-start threshold, congestion window set to one maximum segment size (MSS), and slow-start state. (Along with Reno, Tahoe was first developed for 4.3BSD.)</li> <li>CUBIC: Uses a cubic function (hence the name) to scale the window, and a \u201chybrid start\u201d function to exit slow start. CUBIC tends to be more aggressive than Reno, and is the default in Linux.</li> <li>BBR: Instead of window-based, BBR builds an explicit model of the network path characteristics (RTT and bandwidth) using probing phases. BBR can provide dramatically better performance on some network paths, while hurting performance on others. BBRv2 is currently in development and promises to fix some of the deficiencies of v1.</li> <li>DCTCP: DataCenter TCP relies on switches configured to emit Explicit Congestion Notification (ECN) marks at a very shallow queue occupancy to rapidly ramp up to the available bandwidth (RFC 8257) [Bensley 17]. This makes DCTCP unsuitable for deployment across the Internet, but in a suitably configured controlled environment it can improve performance significantly</li> </ul> <p>There're also: Vegas, New Reno, and Hybla.</p>"},{"location":"tcp/offload/","title":"TCP Offloading","text":""},{"location":"tcp/offload/#gso","title":"GSO","text":"<p>Network devices and networks accept packet sizes up to a maximum segment size (MSS) that may be as small as 1500 bytes. To avoid the network stack overheads of sending many small packets, Linux uses generic segmentation offload (GSO) to send packets up to 64 Kbytes in size (\u201csuper packets\u201d), which are split into MSS-sized segments just before delivery to the network device. If the NIC and driver support TCP segmentation offload (TSO), GSO leaves splitting to the device, improving network stack throughput. There is also a generic receive offload (GRO) complement to GSO.6 GRO and GSO are implemented in kernel software, and TSO is implemented by NIC hardware.</p>"}]}